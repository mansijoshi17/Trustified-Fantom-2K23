{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/TrustifiedCreds.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n// import \"@creds-protocol/contracts/CredsIssuer.sol\";\n\ncontract TrustifiedCreds {\n    using Counters for Counters.Counter;\n    Counters.Counter private _credIds;\n\n    address public owner;\n\n    event CredCreated(address, uint256, uint256, uint256, string);\n    event IssueCred(address, uint256, uint256);\n\n    function GenerateCred(\n        uint256 merkleTreeDepth,\n        uint256 zeroValue,\n        string memory credURI\n    ) public {\n        require(msg.sender == owner, \"Only Owner can call this\");\n        uint256 _credId = _credIds.current();\n        _credIds.increment();\n        // createCred(_credId, merkleTreeDepth, zeroValue, msg.sender, credURI);\n        emit CredCreated(\n            msg.sender,\n            _credId,\n            merkleTreeDepth,\n            zeroValue,\n            credURI\n        );\n    }\n\n    function issueCredToTrustifiedIssuer(\n        uint256 credId,\n        uint256 identityCommitment\n    ) public {\n        require(msg.sender == owner, \"Only Owner can call this\");\n        // addIdentity(credId, identityCommitment);\n        emit IssueCred(msg.sender, credId, identityCommitment);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}